### This file was generated by Nexus Schema
### Do not make changes to this file directly

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
@see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt
"""
scalar BigInt

"""
The `Byte` scalar type represents byte value as a Buffer
"""
scalar Bytes

type Category {
  id: Int!
  name: String!
}

input CategoryAddInput {
  id: Int
  name: String!
}

input CategoryDeleteInput {
  id: Int!
}

input CategoryPageInput {
  name: String
}

type CategoryPageResponse {
  current: Int!
  pageSize: Int!
  records: [Category!]!
  total: Int!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""
An arbitrary-precision Decimal type
"""
scalar Decimal

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar Json
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

input LoginInput {
  password: String!
  username: String!
}

type MeResponse {
  id: Int
  username: String
}

type MessageResponse {
  message: String!
}

type Mutation {
  categoryAdd(input: CategoryAddInput!): Category!
  categoryDelete(input: CategoryDeleteInput!): MessageResponse!
  login(input: LoginInput!): MessageResponse!
  postAdd(input: PostAddInput!): Post!
  postPublish(input: PostPublishInput!): MessageResponse!
}

input Page {
  pageCurrent: Int!
  pageSize: Int!
}

type Post {
  author: String!
  authorId: Int!
  category: String!
  categoryId: Int!
  content: String
  createdAt: DateTime!
  id: Int!
  published: Boolean!
  title: String!
  updatedAt: DateTime!
}

input PostAddInput {
  categoryId: Int!
  content: String
  id: Int
  published: Boolean!
  title: String!
}

input PostDeleteInput {
  id: Int!
}

input PostDetailInput {
  id: Int!
}

input PostPageInput {
  categoryId: Int
  keyword: String
}

type PostPageResponse {
  current: Int!
  pageSize: Int!
  records: [Post]!
  total: Int!
}

input PostPublishInput {
  id: Int!
  published: Boolean!
}

type Query {
  _service: _service
  categoryList: [Category!]!
  categoryPage(input: CategoryPageInput, page: Page): CategoryPageResponse!
  me: MeResponse!
  postDetail(input: PostDetailInput!): Post!
  postPage(input: PostPageInput, page: Page): PostPageResponse!
}

type User {
  email: String!
  id: Int!
  password: String!
  posts: [Post]!
  username: String!
}

type _service {
  sdl: String!
}
